(define quoted_expr '(+ 1 2))
(define quoted_expr 'a)
(define quoted_expr '1.3)

1 1.2 .2 1.

#| this is a comment |#
(define (make-dispatcher)
  (define (make-entry name val description) (cons name (cons val description)))
  (define (entry-name entry) (car entry))
  (define (entry-val entry) (cadr entry))
  (define (entry-description entry) (cddr entry))
  (define entries '())
  (define (insert! name val description) (set! entries (cons (make-entry name val description) entries)))
  (define (lookup . args)
    (define (lookup-iter rem-entries)
      (cond ((null? rem-entries) nil)
            ((eq? (car args) (entry-name (car rem-entries))) (car rem-entries))
            (else (lookup-iter (cdr rem-entries)))))
    (if (null? args)
        (display-interface)
        (let ((lookup-result (lookup-iter entries)))
             (if lookup-result
                 (if (null? (cdr args))
                     ((entry-val lookup-result))
                     (apply (entry-val lookup-result) (cdr args)))
                 (error "make-dispatch lookup: no value inserted under name" (car args))))))
  (define (display-interface)
    (define (display-interface-iter rem-entries)
      (when (not (null? rem-entries))
            (display (entry-name (car rem-entries))) (display ": ") (display (entry-description (car rem-entries))) (newline)
            (display-interface-iter (cdr rem-entries))))
    (display-interface-iter entries))
  (define (dispatch . m)
    (cond ((null? m) (display-interface))
          ((eq? (car m) 'insert!) insert!)
          ((eq? (car m) 'lookup) lookup)
          (else (error "make-dispatcher dispatch: unknown message" m))))
  dispatch)

